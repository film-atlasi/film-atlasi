import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:film_atlasi/features/movie/models/FilmPost.dart';
import 'package:film_atlasi/features/movie/widgets/MoviePostCard.dart';
import 'package:flutter/material.dart';

class FilmSeedPage extends StatefulWidget {
  const FilmSeedPage({super.key});

  @override
  State<FilmSeedPage> createState() => _FilmSeedPageState();
}

class _FilmSeedPageState extends State<FilmSeedPage> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final List<MoviePost> _moviePosts = []; // Post listesi
  bool _isLoading = false; // YÃ¼kleme durumu
  bool _hasMore = true; // Daha fazla veri var mÄ±?
  DocumentSnapshot? _lastDocument; // Son Ã§ekilen belge referansÄ±
  final int _postLimit = 5; // Her yÃ¼klemede kaÃ§ post Ã§ekilecek
  final ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    _fetchPosts(); // Ä°lk veri Ã§ekme iÅŸlemi
    _scrollController.addListener(_onScroll); // KaydÄ±rmayÄ± dinle
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  /// **ðŸ”¥ Firebase'den Lazy Load ile PostlarÄ± Ã‡ekme**
  Future<void> _fetchPosts() async {
    if (_isLoading || !_hasMore) return; // Zaten yÃ¼kleniyorsa Ã§Ä±k

    setState(() {
      _isLoading = true;
    });

    try {
      Query query = _firestore
          .collectionGroup('posts') // ðŸ”¥ TÃ¼m "posts" koleksiyonlarÄ±nÄ± al
          .where("source", isEqualTo: "films")
          .orderBy('timestamp', descending: true)
          .limit(_postLimit);

      if (_lastDocument != null) {
        query = query.startAfterDocument(_lastDocument!);
      }

      QuerySnapshot querySnapshot = await query.get();

      if (!mounted) return; // ðŸš€ **Sayfa kaldÄ±rÄ±ldÄ±ysa iÅŸlemi iptal et*

      if (querySnapshot.docs.isNotEmpty) {
        _lastDocument = querySnapshot.docs.last; // Son dokÃ¼manÄ± referans al
        _moviePosts.addAll(
            querySnapshot.docs.map((doc) => MoviePost.fromFirestore(doc)));
      } else {
        _hasMore = false; // Daha fazla veri yok
      }
    } catch (e) {
      print("Hata oluÅŸtu: $e");
    }

    if (!mounted) return; // ðŸš€ **Yine sayfa kaldÄ±rÄ±ldÄ± mÄ± kontrol et**

    setState(() {
      _isLoading = false;
    });
  }

  /// **ðŸ”¥ AÅŸaÄŸÄ± kaydÄ±rma kontrolÃ¼**
  void _onScroll() {
    if (_isLoading || !_hasMore) return;
    if (_scrollController.position.pixels >=
        _scrollController.position.maxScrollExtent - 300) {
      _fetchPosts(); // KullanÄ±cÄ± en sona yaklaÅŸtÄ±ÄŸÄ±nda yeni verileri getir
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: RefreshIndicator(
        onRefresh: () async {
          _moviePosts.clear();
          _lastDocument = null;
          _hasMore = true;
          await _fetchPosts();
        },
        child: ListView.builder(
          controller: _scrollController,
          itemCount: _moviePosts.length + 1, // YÃ¼kleme gÃ¶stergesi iÃ§in +1
          itemBuilder: (context, index) {
            if (index == _moviePosts.length) {
              return _isLoading
                  ? Padding(
                      padding: const EdgeInsets.all(18.0),
                      child: Center(child: CircularProgressIndicator()),
                    )
                  : SizedBox();
            }
            return MoviePostCard(moviePost: _moviePosts[index]);
          },
        ),
      ),
    );
  }
}
