import 'package:cloud_firestore/cloud_firestore.dart';

class NotificationService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  Future<void> addNotification(
      {required String toUserId,
      required String fromUserId,
      required String fromUsername,
      required String eventType,
      String? filmId = "", // Post ID opsiyonel (Takip iÃ§in gerekmez)
      String? postId = "",
      String? photo = ""}) async {
    try {

      if(toUserId == fromUserId) return;

      await _firestore
          .collection("users")
          .doc(toUserId) // KullanÄ±cÄ±nÄ±n UIDâ€™si (Bildirim alacak kiÅŸi)
          .collection("notifications")
          .add({
        "fromId": fromUserId, // Kimden geldi
        "from": fromUsername, // Kimden geldi (KullanÄ±cÄ± adÄ±)
        "event": eventType, // Bildirim tÃ¼rÃ¼ (like, follow, comment)
        "filmId": filmId, // Posta baÄŸlÄ± bildirimler iÃ§in
        "postId": postId,
        "photo": photo,
        "read": false, // Okundu mu?
        "timestamp": FieldValue.serverTimestamp(), // Zaman damgasÄ±
      });
      print("âœ… Bildirim baÅŸarÄ±yla eklendi: $eventType");
    } catch (e) {
      print("ðŸš¨ Bildirim ekleme hatasÄ±: $e");
    }
  }

  Future<void> markNotificationRead(
      String userId, String notificationId) async {
    try {
      await _firestore
          .collection("users")
          .doc(userId)
          .collection("notifications")
          .doc(notificationId)
          .update({"read": true});
      print("âœ… Bildirim okundu olarak iÅŸaretlendi");
    } catch (e) {
      print("ðŸš¨ Bildirim okundu olarak iÅŸaretlenemedi: $e");
    }
  }

  Stream<bool> hasNewNotifications(String userId) {
    return _firestore
        .collection("users")
        .doc(userId)
        .collection("notifications")
        .where("read", isEqualTo: false)
        .snapshots()
        .map((snapshot) => snapshot.docs.isNotEmpty);
  }

  Stream<int> getUnreadNotificationCount(String userId) {
    return _firestore
        .collection("users")
        .doc(userId)
        .collection("notifications")
        .where("read", isEqualTo: false)
        .snapshots()
        .map((snapshot) => snapshot.docs.length);
  }

  Future<void> deleteNotification(String userId, String notificationId) async {
    try {
      await _firestore
          .collection("users")
          .doc(userId)
          .collection("notifications")
          .doc(notificationId)
          .delete();
      print("âœ… Bildirim silindi");
    } catch (e) {
      print("ðŸš¨ Bildirim silinemedi: $e");
    }
  }
}
