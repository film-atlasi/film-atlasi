import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class Helpers {
  /// ðŸŽ¬ Film TÃ¼rlerini ID'den Ä°sme Ã‡eviren Fonksiyon
  static final Map<int, String> genreMap = {
    28: "Aksiyon",
    12: "Macera",
    16: "Animasyon",
    35: "Komedi",
    80: "SuÃ§",
    99: "Belgesel",
    18: "Dram",
    10751: "Aile",
    14: "Fantastik",
    36: "Tarih",
    27: "Korku",
    10402: "MÃ¼zik",
    9648: "Gizem",
    10749: "Romantik",
    878: "Bilim Kurgu",
    10770: "TV Filmi",
    53: "Gerilim",
    10752: "SavaÅŸ",
    37: "Western",
  };

  static int colorToInt(Color color) {
    return int.parse('0xFF${color.value.toRadixString(16).substring(2)}');
  }

  static Color intToColor(int color) {
    return Color(color);
  }

  // ðŸ”¥ Timestamp'i "x dakika Ã¶nce" formatÄ±na Ã§eviren fonksiyon
  static String formatTimestamp(Timestamp timestamp) {
    DateTime postTime = timestamp.toDate();
    Duration difference = DateTime.now().difference(postTime);

    if (difference.inSeconds < 60) {
      return "${difference.inSeconds} saniye Ã¶nce";
    } else if (difference.inMinutes < 60) {
      return "${difference.inMinutes} dakika Ã¶nce";
    } else if (difference.inHours < 24) {
      return "${difference.inHours} saat Ã¶nce";
    } else if (difference.inDays < 7) {
      return "${difference.inDays} gÃ¼n Ã¶nce";
    } else if (difference.inDays < 30) {
      return "${(difference.inDays / 7).floor()} hafta Ã¶nce";
    } else if (difference.inDays < 365) {
      return "${(difference.inDays / 30).floor()} ay Ã¶nce";
    } else {
      return "${(difference.inDays / 365).floor()} yÄ±l Ã¶nce";
    }
  }

  /// ðŸ”„ Film TÃ¼rlerini DÃ¶nÃ¼ÅŸtÃ¼rme
  static String getGenres(List<int>? genreIds) {
    if (genreIds == null || genreIds.isEmpty) return 'Bilinmiyor';
    return genreIds.map((id) => genreMap[id] ?? 'Bilinmiyor').join(', ');
  }

  /// ðŸ“† YayÄ±nlanÄ±ÅŸ Tarihini "GÃ¼n Ay YÄ±l" formatÄ±na Ã§evirme
  static String reverseDate(String? releaseDate) {
    if (releaseDate == null || releaseDate.isEmpty) return 'Bilinmiyor';
    try {
      final parts = releaseDate.split('-');
      if (parts.length == 3) {
        final day = parts[2];
        final month = parts[1];
        final year = parts[0];

        // Ay numarasÄ±nÄ± TÃ¼rkÃ§e yazÄ±ya Ã§evir
        const months = [
          'Ocak',
          'Åžubat',
          'Mart',
          'Nisan',
          'MayÄ±s',
          'Haziran',
          'Temmuz',
          'AÄŸustos',
          'EylÃ¼l',
          'Ekim',
          'KasÄ±m',
          'AralÄ±k'
        ];
        final monthName = months[int.parse(month) - 1];

        return "$day $monthName $year";
      }
      return 'Bilinmiyor';
    } catch (e) {
      return 'Bilinmiyor';
    }
  }

  /// ðŸ“… Tarihi biÃ§imlendirme (Ã¶rn: "12 Ocak 2025")
  static String formatDate(DateTime? date) {
    if (date == null) return 'Unknown';
    return DateFormat('dd MMMM yyyy', 'tr')
        .format(date); // TÃ¼rkÃ§e tarih formatÄ±
  }
}

/// ðŸ”¹ Dikey BoÅŸluk Eklemek Ä°Ã§in Widget
Widget AddVerticalSpace(BuildContext context, double size) => SizedBox(
      height: MediaQuery.of(context).size.height * size,
    );

/// ðŸ”¹ Yatay BoÅŸluk Eklemek Ä°Ã§in Widget
Widget AddHorizontalSpace(BuildContext context, double size) => SizedBox(
      width: MediaQuery.of(context).size.width * size,
    );
